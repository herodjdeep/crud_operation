package com.deepak.api.service.impl;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Random;

import org.springframework.stereotype.Service;

import com.deepak.api.constants.AccountsConstants;
import com.deepak.api.dto.CustomerDto;
import com.deepak.api.entity.Accounts;
import com.deepak.api.entity.Customer;
import com.deepak.api.exception.CustomerAlreadyExistsException;
import com.deepak.api.mapper.AccountsMapper;
import com.deepak.api.mapper.CustomerMapper;
import com.deepak.api.repository.AccountsRepository;
import com.deepak.api.repository.CustomerRepository;
import com.deepak.api.service.IAccountsService;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class AccountsServiceImpl implements IAccountsService {

	private AccountsRepository accountsRepository;
	private CustomerRepository customerRepository;

	@Override
	public void createCustomer(CustomerDto customerDto) throws Exception { // controller layer

		Optional<Customer> optionalCustomer = customerRepository.findByMobileNumber(customerDto.getMobileNumber());

		if (optionalCustomer.isPresent()) {

			throw new CustomerAlreadyExistsException(
					"Customer already exists with mobile number " + customerDto.getMobileNumber());

			// will go to the created Exception package
		}

		Customer newCustomer = CustomerMapper.mapToCustomer(customerDto, new Customer());
		
		newCustomer.setCreatedAt(LocalDateTime.now());
		newCustomer.setCreatedBy("Anonomous");

		Customer savedCustomer = customerRepository.save(newCustomer);
		Accounts savedAccounts = accountsRepository.save(createUserAccounts(savedCustomer));

	}

	public Accounts createUserAccounts(Customer customers) { // carries saved data of customers

		Accounts account = new Accounts();

		account.setCustomerId(customers.getCustomerId());
		long randomAccountNumber = 1000000000L + new Random().nextInt(900000000);
		account.setAccountNumber(randomAccountNumber);
		account.setAccountType(AccountsConstants.SAVINGS);
		account.setBranchAddress(AccountsConstants.ADDRESS);

		return account;

	}

}
